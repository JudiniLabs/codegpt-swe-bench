{
    "sympy/printing/mathml.py": [
        {
            "orig_text": "    def _print_Function(self, e):\n        x = self.dom.createElement(\"apply\")\n        x.appendChild(self.dom.createElement(self.mathml_tag(e)))\n        for arg in e.args:\n            x.appendChild(self._print(arg))\n        return x\n\n    def _print_Basic(self, e):\n        x = self.dom.createElement(self.mathml_tag(e))\n        for arg in e.args:\n            x.appendChild(self._print(arg))\n        return x\n\n    def _print_AssocOp(self, e):\n        x = self.dom.createElement('apply')\n        x_1 = self.dom.createElement(self.mathml_tag(e))\n        x.appendChild(x_1)\n        for arg in e.args:\n            x.appendChild(self._print(arg))\n        return x\n",
            "new_text": "    def _print_Function(self, e):\n        x = self.dom.createElement(\"apply\")\n        x.appendChild(self.dom.createElement(self.mathml_tag(e)))\n        for arg in e.args:\n            x.appendChild(self._print(arg))\n        return x\n\n    def _print_Basic(self, e):\n        x = self.dom.createElement(self.mathml_tag(e))\n        for arg in e.args:\n            x.appendChild(self._print(arg))\n        return x\n\n    def _print_AssocOp(self, e):\n        x = self.dom.createElement('apply')\n        x_1 = self.dom.createElement(self.mathml_tag(e))\n        x.appendChild(x_1)\n        for arg in e.args:\n            x.appendChild(self._print(arg))\n        return x\n\n    def _print_Indexed(self, e):\n        x = self.dom.createElement('apply')\n        x.appendChild(self.dom.createElement('subscript'))\n        x.appendChild(self._print(e.base))\n        for index in e.indices:\n            x.appendChild(self._print(index))\n        return x\n\n    def _print_IndexedBase(self, e):\n        return self._print(e.label)\n",
            "match_ratio": 1.0,
            "match_segment": "    def _print_Function(self, e):\n        x = self.dom.createElement(\"apply\")\n        x.appendChild(self.dom.createElement(self.mathml_tag(e)))\n        for arg in e.args:\n            x.appendChild(self._print(arg))\n        return x\n\n    def _print_Basic(self, e):\n        x = self.dom.createElement(self.mathml_tag(e))\n        for arg in e.args:\n            x.appendChild(self._print(arg))\n        return x\n\n    def _print_AssocOp(self, e):\n        x = self.dom.createElement('apply')\n        x_1 = self.dom.createElement(self.mathml_tag(e))\n        x.appendChild(x_1)\n        for arg in e.args:\n            x.appendChild(self._print(arg))\n        return x\n",
            "start_idx": 15667,
            "num_matches": 1
        },
        {
            "orig_text": "    def _print_Lambda(self, e):\n        x = self.dom.createElement('mfenced')\n        mrow = self.dom.createElement('mrow')\n        symbols = e.args[0]\n        if len(symbols) == 1:\n            symbols = self._print(symbols[0])\n        else:\n            symbols = self._print(symbols)\n        mrow.appendChild(symbols)\n        mo = self.dom.createElement('mo')\n        mo.appendChild(self.dom.createTextNode('&#x21A6;'))\n        mrow.appendChild(mo)\n        mrow.appendChild(self._print(e.args[1]))\n        x.appendChild(mrow)\n        return x\n\n\ndef mathml(expr, printer='content', **settings):\n",
            "new_text": "    def _print_Lambda(self, e):\n        x = self.dom.createElement('mfenced')\n        mrow = self.dom.createElement('mrow')\n        symbols = e.args[0]\n        if len(symbols) == 1:\n            symbols = self._print(symbols[0])\n        else:\n            symbols = self._print(symbols)\n        mrow.appendChild(symbols)\n        mo = self.dom.createElement('mo')\n        mo.appendChild(self.dom.createTextNode('&#x21A6;'))\n        mrow.appendChild(mo)\n        mrow.appendChild(self._print(e.args[1]))\n        x.appendChild(mrow)\n        return x\n\n    def _print_Indexed(self, e):\n        if len(e.indices) == 1:\n            x = self.dom.createElement('msub')\n            x.appendChild(self._print(e.base))\n            x.appendChild(self._print(e.indices[0]))\n            return x\n        else:\n            mrow = self.dom.createElement('mrow')\n            mrow.appendChild(self._print(e.base))\n            for index in e.indices:\n                brac = self.dom.createElement('mfenced')\n                brac.setAttribute('open', '[')\n                brac.setAttribute('close', ']')\n                brac.appendChild(self._print(index))\n                mrow.appendChild(brac)\n            return mrow\n\n    def _print_IndexedBase(self, e):\n        return self._print(e.label)\n\n\ndef mathml(expr, printer='content', **settings):\n",
            "match_ratio": 1.0,
            "match_segment": "    def _print_Lambda(self, e):\n        x = self.dom.createElement('mfenced')\n        mrow = self.dom.createElement('mrow')\n        symbols = e.args[0]\n        if len(symbols) == 1:\n            symbols = self._print(symbols[0])\n        else:\n            symbols = self._print(symbols)\n        mrow.appendChild(symbols)\n        mo = self.dom.createElement('mo')\n        mo.appendChild(self.dom.createTextNode('&#x21A6;'))\n        mrow.appendChild(mo)\n        mrow.appendChild(self._print(e.args[1]))\n        x.appendChild(mrow)\n        return x\n\n\ndef mathml(expr, printer='content', **settings):\n",
            "start_idx": 44254,
            "num_matches": 1
        }
    ]
}