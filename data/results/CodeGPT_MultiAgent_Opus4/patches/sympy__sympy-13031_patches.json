{
    "sympy/matrices/sparse.py": [
        {
            "orig_text": "    def col_join(self, other):\n        \"\"\"Returns B augmented beneath A (row-wise joining)::\n\n            [A]\n            [B]\n\n        Examples\n        ========\n\n        >>> from sympy import SparseMatrix, Matrix, ones\n        >>> A = SparseMatrix(ones(3))\n        >>> A\n        Matrix([\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1]])\n        >>> B = SparseMatrix.eye(3)\n        >>> B\n        Matrix([\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])\n        >>> C = A.col_join(B); C\n        Matrix([\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])\n        >>> C == A.col_join(Matrix(B))\n        True\n\n        Joining along columns is the same as appending rows at the end\n        of the matrix:\n\n        >>> C == A.row_insert(A.rows, Matrix(B))\n        True\n        \"\"\"\n        if not self:\n            return type(self)(other)\n        A, B = self, other\n        if not A.cols == B.cols:\n            raise ShapeError()\n        A = A.copy()\n        if not isinstance(B, SparseMatrix):\n            k = 0\n            b = B._mat\n            for i in range(B.rows):\n                for j in range(B.cols):\n                    v = b[k]\n                    if v:\n                        A._smat[(i + A.rows, j)] = v\n                    k += 1\n        else:\n            for (i, j), v in B._smat.items():\n                A._smat[i + A.rows, j] = v\n        A.rows += B.rows\n        return A\n",
            "new_text": "    def _eval_col_join(self, other):\n        \"\"\"Returns B augmented beneath A (row-wise joining)::\n\n            [A]\n            [B]\n\n        Examples\n        ========\n\n        >>> from sympy import SparseMatrix, Matrix, ones\n        >>> A = SparseMatrix(ones(3))\n        >>> A\n        Matrix([\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1]])\n        >>> B = SparseMatrix.eye(3)\n        >>> B\n        Matrix([\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])\n        >>> C = A.col_join(B); C\n        Matrix([\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])\n        >>> C == A.col_join(Matrix(B))\n        True\n\n        Joining along columns is the same as appending rows at the end\n        of the matrix:\n\n        >>> C == A.row_insert(A.rows, Matrix(B))\n        True\n        \"\"\"\n        if not self:\n            return type(self)(other)\n        A, B = self, other\n        if not A.cols == B.cols:\n            raise ShapeError()\n        A = A.copy()\n        if not isinstance(B, SparseMatrix):\n            k = 0\n            b = B._mat\n            for i in range(B.rows):\n                for j in range(B.cols):\n                    v = b[k]\n                    if v:\n                        A._smat[(i + A.rows, j)] = v\n                    k += 1\n        else:\n            for (i, j), v in B._smat.items():\n                A._smat[i + A.rows, j] = v\n        A.rows += B.rows\n        return A\n",
            "match_ratio": 1.0,
            "match_segment": "    def col_join(self, other):\n        \"\"\"Returns B augmented beneath A (row-wise joining)::\n\n            [A]\n            [B]\n\n        Examples\n        ========\n\n        >>> from sympy import SparseMatrix, Matrix, ones\n        >>> A = SparseMatrix(ones(3))\n        >>> A\n        Matrix([\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1]])\n        >>> B = SparseMatrix.eye(3)\n        >>> B\n        Matrix([\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])\n        >>> C = A.col_join(B); C\n        Matrix([\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])\n        >>> C == A.col_join(Matrix(B))\n        True\n\n        Joining along columns is the same as appending rows at the end\n        of the matrix:\n\n        >>> C == A.row_insert(A.rows, Matrix(B))\n        True\n        \"\"\"\n        if not self:\n            return type(self)(other)\n        A, B = self, other\n        if not A.cols == B.cols:\n            raise ShapeError()\n        A = A.copy()\n        if not isinstance(B, SparseMatrix):\n            k = 0\n            b = B._mat\n            for i in range(B.rows):\n                for j in range(B.cols):\n                    v = b[k]\n                    if v:\n                        A._smat[(i + A.rows, j)] = v\n                    k += 1\n        else:\n            for (i, j), v in B._smat.items():\n                A._smat[i + A.rows, j] = v\n        A.rows += B.rows\n        return A\n",
            "start_idx": 29712,
            "num_matches": 1
        },
        {
            "orig_text": "    def row_join(self, other):\n        \"\"\"Returns B appended after A (column-wise augmenting)::\n\n            [A B]\n\n        Examples\n        ========\n\n        >>> from sympy import SparseMatrix, Matrix\n        >>> A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n        >>> A\n        Matrix([\n        [1, 0, 1],\n        [0, 1, 0],\n        [1, 1, 0]])\n        >>> B = SparseMatrix(((1, 0, 0), (0, 1, 0), (0, 0, 1)))\n        >>> B\n        Matrix([\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])\n        >>> C = A.row_join(B); C\n        Matrix([\n        [1, 0, 1, 1, 0, 0],\n        [0, 1, 0, 0, 1, 0],\n        [1, 1, 0, 0, 0, 1]])\n        >>> C == A.row_join(Matrix(B))\n        True\n\n        Joining at row ends is the same as appending columns at the end\n        of the matrix:\n\n        >>> C == A.col_insert(A.cols, B)\n        True\n        \"\"\"\n        if not self:\n            return type(self)(other)\n        A, B = self, other\n        if not A.rows == B.rows:\n            raise ShapeError()\n        A = A.copy()\n        if not isinstance(B, SparseMatrix):\n            k = 0\n            b = B._mat\n            for i in range(B.rows):\n                for j in range(B.cols):\n                    v = b[k]\n                    if v:\n                        A._smat[(i, j + A.cols)] = v\n                    k += 1\n        else:\n            for (i, j), v in B._smat.items():\n                A._smat[(i, j + A.cols)] = v\n        A.cols += B.cols\n        return A\n",
            "new_text": "    def _eval_row_join(self, other):\n        \"\"\"Returns B appended after A (column-wise augmenting)::\n\n            [A B]\n\n        Examples\n        ========\n\n        >>> from sympy import SparseMatrix, Matrix\n        >>> A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n        >>> A\n        Matrix([\n        [1, 0, 1],\n        [0, 1, 0],\n        [1, 1, 0]])\n        >>> B = SparseMatrix(((1, 0, 0), (0, 1, 0), (0, 0, 1)))\n        >>> B\n        Matrix([\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])\n        >>> C = A.row_join(B); C\n        Matrix([\n        [1, 0, 1, 1, 0, 0],\n        [0, 1, 0, 0, 1, 0],\n        [1, 1, 0, 0, 0, 1]])\n        >>> C == A.row_join(Matrix(B))\n        True\n\n        Joining at row ends is the same as appending columns at the end\n        of the matrix:\n\n        >>> C == A.col_insert(A.cols, B)\n        True\n        \"\"\"\n        if not self:\n            return type(self)(other)\n        A, B = self, other\n        if not A.rows == B.rows:\n            raise ShapeError()\n        A = A.copy()\n        if not isinstance(B, SparseMatrix):\n            k = 0\n            b = B._mat\n            for i in range(B.rows):\n                for j in range(B.cols):\n                    v = b[k]\n                    if v:\n                        A._smat[(i, j + A.cols)] = v\n                    k += 1\n        else:\n            for (i, j), v in B._smat.items():\n                A._smat[(i, j + A.cols)] = v\n        A.cols += B.cols\n        return A\n",
            "match_ratio": 1.0,
            "match_segment": "    def row_join(self, other):\n        \"\"\"Returns B appended after A (column-wise augmenting)::\n\n            [A B]\n\n        Examples\n        ========\n\n        >>> from sympy import SparseMatrix, Matrix\n        >>> A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n        >>> A\n        Matrix([\n        [1, 0, 1],\n        [0, 1, 0],\n        [1, 1, 0]])\n        >>> B = SparseMatrix(((1, 0, 0), (0, 1, 0), (0, 0, 1)))\n        >>> B\n        Matrix([\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])\n        >>> C = A.row_join(B); C\n        Matrix([\n        [1, 0, 1, 1, 0, 0],\n        [0, 1, 0, 0, 1, 0],\n        [1, 1, 0, 0, 0, 1]])\n        >>> C == A.row_join(Matrix(B))\n        True\n\n        Joining at row ends is the same as appending columns at the end\n        of the matrix:\n\n        >>> C == A.col_insert(A.cols, B)\n        True\n        \"\"\"\n        if not self:\n            return type(self)(other)\n        A, B = self, other\n        if not A.rows == B.rows:\n            raise ShapeError()\n        A = A.copy()\n        if not isinstance(B, SparseMatrix):\n            k = 0\n            b = B._mat\n            for i in range(B.rows):\n                for j in range(B.cols):\n                    v = b[k]\n                    if v:\n                        A._smat[(i, j + A.cols)] = v\n                    k += 1\n        else:\n            for (i, j), v in B._smat.items():\n                A._smat[(i, j + A.cols)] = v\n        A.cols += B.cols\n        return A\n",
            "start_idx": 35446,
            "num_matches": 1
        }
    ]
}