{
    "requests/utils.py": [
        {
            "orig_text": "def stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    if r.encoding is None:\n        for item in iterator:\n            yield item\n        return\n\n    decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
            "new_text": "def stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    encoding = r.encoding\n    \n    # If encoding is not set, try to decode with utf-8 as a reasonable default\n    # This matches the behavior of Response.text when encoding is None\n    if encoding is None:\n        encoding = 'utf-8'\n    \n    try:\n        decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n    except (LookupError, TypeError):\n        # If the encoding is invalid or None was passed despite our check,\n        # fall back to yielding bytes\n        for item in iterator:\n            yield item\n        return\n    \n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
            "match_ratio": 1.0,
            "match_segment": "def stream_decode_response_unicode(iterator, r):\n    \"\"\"Stream decodes a iterator.\"\"\"\n\n    if r.encoding is None:\n        for item in iterator:\n            yield item\n        return\n\n    decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n    for chunk in iterator:\n        rv = decoder.decode(chunk)\n        if rv:\n            yield rv\n    rv = decoder.decode(b'', final=True)\n    if rv:\n        yield rv\n",
            "start_idx": 10987,
            "num_matches": 1
        }
    ]
}