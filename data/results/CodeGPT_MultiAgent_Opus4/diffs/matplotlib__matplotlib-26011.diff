--- a/lib/matplotlib/axis.py
+++ b/lib/matplotlib/axis.py
@@ -2,6 +2,7 @@
 Classes for the ticks and x- and y-axis.
 """
 
+import dataclasses
 import datetime
 import functools
 import logging
@@ -37,6 +38,11 @@
     'in': (mlines.TICKUP, mlines.TICKDOWN),
     'inout': ('|', '|'),
 }
+
+
+# Marker to prevent infinite recursion when updating shared axes
+_NoRecursionMarker = dataclasses.make_dataclass(
+    "_NoRecursionMarker", ["event_src"])
 
 
 class Tick(martist.Artist):
@@ -1237,13 +1243,18 @@
         if auto is not None:
             self._set_autoscale_on(bool(auto))
 
-        if emit:
+        if emit and emit != _NoRecursionMarker(self.axes):
             self.axes.callbacks.process(f"{name}lim_changed", self.axes)
             # Call all of the other axes that are shared with this one
             for other in self._get_shared_axes():
                 if other is not self.axes:
+                    # Undocumented internal feature: emit can be set to
+                    # _NoRecursionMarker(self.axes) which is treated as True, but
+                    # avoids infinite recursion.
+                    if not isinstance(emit, _NoRecursionMarker):
+                        emit = _NoRecursionMarker(self.axes)
                     other._axis_map[name]._set_lim(
-                        v0, v1, emit=False, auto=auto)
+                        v0, v1, emit=emit, auto=auto)
                     if other.figure != self.figure:
                         other.figure.canvas.draw_idle()
 
