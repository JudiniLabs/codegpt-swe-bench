{
    "sympy/matrices/expressions/matexpr.py": [
        {
            "orig_text": "    @_sympifyit('other', NotImplemented)\n    @call_highest_priority('__rmul__')\n    def __matmul__(self, other):\n        return MatMul(self, other).doit()\n\n    @_sympifyit('other', NotImplemented)\n    @call_highest_priority('__mul__')\n    def __rmatmul__(self, other):\n        return MatMul(other, self).doit()\n",
            "new_text": "    @_sympifyit('other', NotImplemented)\n    @call_highest_priority('__rmul__')\n    def __matmul__(self, other):\n        if not isinstance(other, MatrixExpr) and not hasattr(other, 'is_Matrix'):\n            raise ValueError(\"Scalar operands are not allowed, use '*' instead\")\n        return MatMul(self, other).doit()\n\n    @_sympifyit('other', NotImplemented)\n    @call_highest_priority('__matmul__')\n    def __rmatmul__(self, other):\n        if not isinstance(other, MatrixExpr) and not hasattr(other, 'is_Matrix'):\n            raise ValueError(\"Scalar operands are not allowed, use '*' instead\")\n        return MatMul(other, self).doit()\n",
            "match_ratio": 0.9903536977491961,
            "match_segment": ")\n\n    @_sympifyit('other', NotImplemented)\n    @call_highest_priority('__rmul__')\n    def __matmul__(self, other):\n        return MatMul(self, other).doit()\n\n    @_sympifyit('other', NotImplemented)\n    @call_highest_priority('__mul__')\n    def __rmul__(self, other):\n        return MatMul(other, self).doit()\n",
            "start_idx": 3023,
            "num_matches": 1
        }
    ]
}