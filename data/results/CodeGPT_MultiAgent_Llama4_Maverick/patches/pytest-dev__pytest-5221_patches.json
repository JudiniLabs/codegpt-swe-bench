{
    "src/_pytest/python.py": [
        {
            "orig_text": "def showfixtures(config):\n from _pytest.main import wrap_session\n\n return wrap_session(config, _showfixtures_main)\n\n\ndef _showfixtures_main(config, session):\n import _pytest.config\n\n session.perform_collect()\n curdir = py.path.local()\n tw = _pytest.config.create_terminal_writer(config)\n verbose = config.getvalue(\"verbose\")\n\n fm = session._fixturemanager\n\n available = []\n seen = set()\n\n for argname, fixturedefs in fm._arg2fixturedefs.items():\n assert fixturedefs is not None\n if not fixturedefs:\n continue\n for fixturedef in fixturedefs:\n loc = getlocation(fixturedef.func, curdir)\n if (fixturedef.argname, loc) in seen:\n continue\n seen.add((fixturedef.argname, loc))\n available.append(\n (\n len(fixturedef.baseid),\n fixturedef.func.__module__,\n curdir.bestrelpath(loc),\n fixturedef.argname,\n fixturedef,\n )\n )\n\n available.sort()\n currentmodule = None\n for baseid, module, bestrel, argname, fixturedef in available:\n if currentmodule != module:\n if not module.startswith(\"_pytest.\"):\n tw.line()\n tw.sep(\"-\", \"fixtures defined from %s\" % (module,))\n currentmodule = module\n if verbose <=0 and argname[0] == \"_\":\n continue\n if verbose >0:\n scopestr = fixturedef.scope\n if scopestr == \"session\":\n scopestr = \"session scoped\"\n elif scopestr == \"module\":\n scopestr = \"module scoped\"\n elif scopestr == \"class\":\n scopestr = \"class scoped\"\n elif scopestr == \"function\":\n scopestr = \"function scoped\"\n funcargspec = \"%s [%s] -- %s\" % (argname, scopestr, bestrel)\n else:\n funcargspec = argname\n tw.line(funcargspec, green=True)\n loc = getlocation(fixturedef.func, curdir)\n doc = fixturedef.func.__doc__ or \"\"\n if doc:\n write_docstring(tw, doc)\n else:\n tw.line(\" %s: no docstring available\" % (loc,), red=True)\n",
            "new_text": "def showfixtures(config):\n from _pytest.main import wrap_session\n\n return wrap_session(config, _showfixtures_main)\n\n\ndef _showfixtures_main(config, session):\n import _pytest.config\n\n session.perform_collect()\n curdir = py.path.local()\n tw = _pytest.config.create_terminal_writer(config)\n verbose = config.getvalue(\"verbose\")\n\n fm = session._fixturemanager\n\n available = []\n seen = set()\n\n for argname, fixturedefs in fm._arg2fixturedefs.items():\n assert fixturedefs is not None\n if not fixturedefs:\n continue\n for fixturedef in fixturedefs:\n loc = getlocation(fixturedef.func, curdir)\n if (fixturedef.argname, loc) in seen:\n continue\n seen.add((fixturedef.argname, loc))\n available.append(\n (\n len(fixturedef.baseid),\n fixturedef.func.__module__,\n curdir.bestrelpath(loc),\n fixturedef.argname,\n fixturedef,\n )\n )\n\n available.sort()\n currentmodule = None\n for baseid, module, bestrel, argname, fixturedef in available:\n if currentmodule != module:\n if not module.startswith(\"_pytest.\"):\n tw.line()\n tw.sep(\"-\", \"fixtures defined from %s\" % (module,))\n currentmodule = module\n if verbose <=0 and argname[0] == \"_\":\n continue\n if verbose >0:\n scopestr = fixturedef.scope\n if scopestr == \"session\":\n scopestr = \"session scoped\"\n elif scopestr == \"module\":\n scopestr = \"module scoped\"\n elif scopestr == \"class\":\n scopestr = \"class scoped\"\n elif scopestr == \"function\":\n scopestr = \"function scoped\"\n funcargspec = \"%s [%s] -- %s\" % (argname, scopestr, bestrel)\n else:\n funcargspec = argname\n tw.line(funcargspec, green=True)\n loc = getlocation(fixturedef.func, curdir)\n doc = fixturedef.func.__doc__ or \"\"\n if doc:\n write_docstring(tw, doc)\n else:\n tw.line(\" %s: no docstring available\" % (loc,), red=True)\n",
            "match_ratio": 0.7761457109283196,
            "match_segment": "def showfixtures(config):\n    from _pytest.main import wrap_session\n\n    return wrap_session(config, _showfixtures_main)\n\n\ndef _showfixtures_main(config, session):\n    import _pytest.config\n\n    session.perform_collect()\n    curdir = py.path.local()\n    tw = _pytest.config.create_terminal_writer(config)\n    verbose = config.getvalue(\"verbose\")\n\n    fm = session._fixturemanager\n\n    available = []\n    seen = set()\n\n    for argname, fixturedefs in fm._arg2fixturedefs.items():\n        assert fixturedefs is not None\n        if not fixturedefs:\n            continue\n        for fixturedef in fixturedefs:\n            loc = getlocation(fixturedef.func, curdir)\n            if (fixturedef.argname, loc) in seen:\n                continue\n            seen.add((fixturedef.argname, loc))\n            available.append(\n                (\n                    len(fixturedef.baseid),\n                    fixturedef.func.__module__,\n                    curdir.bestrelpath(loc),\n                    fixturedef.argname,\n                    fixturedef,\n                )\n            )\n\n    available.sort()\n    currentmodule = None\n    for baseid, module, bestrel, argname, fixturedef in available:\n        if currentmodule != module:\n            if not module.startswith(\"_pytest.\"):\n                tw.line()\n                tw.sep(\"-\", \"fixtures defined from %s\" % (module,))\n                currentmodule = module\n        if verbose <= 0 and argname[0] == \"_\":\n            continue\n        if verbose > 0:\n            funcargspec = \"%s -- %s\" % (argname, bestrel)\n        else:\n            funcargspec = argname\n        tw.line(funcargspec, green=True)\n        loc = getlocation(fixturedef.func, curdir)\n      ",
            "num_matches": 0
        }
    ],
    "testing/python/fixtures.py": [
        {
            "orig_text": "def test_show_fixtures_verbose(self, testdir):\n result = testdir.runpytest(\"--fixtures\", \"-v\")\n result.stdout.fnmatch_lines([\"*tmpdir*--*tmpdir.py*\", \"*temporary directory*\"])\n",
            "new_text": "def test_show_fixtures_verbose(self, testdir):\n result = testdir.runpytest(\"--fixtures\", \"-v\")\n result.stdout.fnmatch_lines([\"*tmpdir*function scoped*--*tmpdir.py*\", \"*temporary directory*\"])\n",
            "match_ratio": 0.9204545454545454,
            "match_segment": "def test_show_fixtures_verbose(self, testdir):\n        result = testdir.runpytest(\"--fixtures\", \"-v\")\n        result.stdout.fnmatch_lines([\"*tmpdir*--*tmpdir.py*\", \"*temporary ",
            "num_matches": 0
        }
    ]
}